type Query {
  teamName: [Team!]
  allTeam: [Team!]
  teamTime(team: String!): Team!
  timeMatch(time: String!): [Team!]
  teamMatch(team: String!): [Match!]
  allMatch: [Match!]
  adminData: AdminData!
}

type Mutation {
  createTeam(name: String!): Team!
  deleteTeam(name: String!): Boolean!
  updateTime(name: String!, time: [String!]!): Team!
  createMatch: [Match!]
  updateAdminData: AdminData!
}

type Subscription {
  createTeam: Team!
  deleteTeam: Team!
  time(team: String!): [String!]
  allTeamTime: Team!
  adminData: AdminData!
  allMatch: MatchSubscriptionPayload!
  teamMatch(team: String!): MatchSubscriptionPayload!
}

type AdminData {
  id: ID!
  admin: String!
  isRegisterClosed: Boolean!
}

type Team {
    id: ID!
    team: String!
    time: [String!]
}

type Match {
    id: ID!
    matchName: String!
    team_1: String!
    team_2: String!
    time: String!
}

enum MutationType {
  CREATED
  DELETED
}

type MatchSubscriptionPayload {
  mutation: MutationType!
  match: Match!
}